import numpy as np, matplotlib.pyplot as plt

results = np.array("""0    0.61049840192580 -0.11821285859771
1    0.62569628056569 -0.10625308731889
2    0.64044856860262 -0.09457514284405
3    0.65474863588295 -0.08315578307293
4    0.66859226684335 -0.07198045470986
5    0.68197750525104 -0.06104233084435
6    0.69490448609793 -0.05034125683355
7    0.70737525901806 -0.03988264548712
8    0.71939360722356 -0.02967635981800
9    0.73096486551688 -0.01973561768448
10   0.74209574046407 -0.01007594782406
11   0.75279413532722 -0.00071422138793
12   0.76306898187353 0.00833222256010
13   0.77293008071921 0.01704634472619
14   0.78238795144036 0.02541205892597
15   0.79145369329721 0.03341476840635
16   0.80013885707809 0.04104178670023
17   0.80845532827683 0.04828264807742
18   0.81641522157182 0.05512931541381
19   0.82403078637447 0.06157629531398
20   0.83131432305679 0.06762067163139
21   0.83827810934752 0.07326206920581
22   0.84493433630003 0.07850255976955
23   0.85129505317778 0.08334652165854
24   0.85737212057070 0.08780046430371
25   0.86317717104372 0.09187282756656
26   0.86872157662256 0.09557376490870
27   0.87401642243955 0.09891491822343
28   0.87907248588846 0.10190919097145
29   0.88390022067152 0.10457052510167
30   0.88850974516033 0.10691368613883
31   0.89291083453377 0.10895405980825
32   0.89711291619873 0.11070746265975
33   0.90112506804247 0.11218996835657
34   0.90495601910755 0.11341775061144
35   0.90861415232072 0.11440694317948
36   0.91210750894578 0.11517351684820
37   0.91544379446676 0.11573317299193
38   0.91863038564138 0.11610125297059
39   0.92167433849573 0.11629266244133
40   0.92458239705988 0.11632180950509
41   0.92736100266951 0.11620255552059
42   0.93001630368236 0.11594817737286
43   0.93255416547907 0.11557133997815
44   0.93498018063675 0.11508407782930
45   0.93729967918027 0.11449778443305
46   0.93951773883103 0.11382320855335
47   0.94163919518602 0.11307045625090
48   0.94366865177118 0.11224899779155
49   0.94561048992352 0.11136767858354
50   0.94746887846449 0.11043473339179
51   0.94924778313542 0.10945780316410
52   0.95095097577165 0.10844395388901
53   0.95258204319814 0.10739969698433
54   0.95414439583386 0.10633101079085
55   0.95564127599642 0.10524336281416
56   0.95707576590199 0.10414173242099
57   0.95845079535836 0.10303063375235
58   0.95976914915144 0.10191413866592
59   0.96103347412779 0.10079589956332
60   0.96224628597699 0.09967917199484
61   0.96340997571956 0.09856683696518
62   0.96452681590676 0.09746142288801
63   0.96559896653976 0.09636512715681
64   0.96662848071634 0.09527983731293
65   0.96761731001343 0.09420715180096
66   0.96856730961467 0.09314840030610
67   0.96948024319199 0.09210466366941
68   0.97035778755037 0.09107679337397
69   0.97120153704539 0.09006543059110
70   0.97201300778240 0.08907102476855
71   0.97279364160690 0.08809385173533
72   0.97354480989478 0.08713403128984
73   0.97426781715158 0.08619154423018
74   0.97496390442914 0.08526624877876
75   0.97563425256821 0.08435789634823
76   0.97627998527503 0.08346614659193
77   0.97690217203992 0.08259058168139
78   0.97750183090525 0.08173071975437
79   0.97807993109032 0.08088602748101
80   0.97863739548002 0.08005593170153
81   0.97917510298418 0.07923983009796
82   0.97969389077390 0.07843710087213
83   0.98019455640126 0.07764711141451
84   0.98067785980812 0.07686922596101
85   0.98114452522985 0.07610281224839
86   0.98159524299933 0.07534724719190
87   0.98203067125632 0.07460192162163
88   0.98245143756721 0.07386624412545
89   0.98285814045980 0.07313964405660
90   0.98325135087746 0.07242157377225
91   0.98363161355713 0.07171151017577
92   0.98399944833496 0.07100895563975
93   0.98435535138357 0.07031343838890
94   0.98469979638453 0.06962451242223
95   0.98503323563947 0.06894175705237
96   0.98535610112314 0.06826477613641
97   0.98566880548159 0.06759319706826
98   0.98597174297821 0.06692666959665
99   0.98626529039075 0.06626486452668
""".split(),dtype=float)


def getData(arr):
	tflow = arr[0::3] * 0.01
	plaq_flow = arr[1::3]
	topC_flow = arr[2::3]
	return  tflow, plaq_flow, topC_flow

# ax1 = fig1.add_subplot(311)
# t_morningstar, pf_morningstar = getFlowPlaq(plaq_morningstar_mac)
# ax1.plot(t_morningstar, pf_morningstar,"-", label="Flowed Plaquette")
# ax1.grid(True)
# # ax.set_xlabel(r"Flow time $\tau$")
# ax1.set_ylabel(r"$P_{Morningstar}$")
# ax1.set_title("Flowed plaquette value with different SU3 exponentiating methods")
# ax1.tick_params(axis='x',which='major',labelsize=8)

t,plaq,topc = getData(results)

fig1 = plt.figure()
ax1 = fig1.add_subplot(311)
ax1.plot(t,plaq)
ax1.set_ylabel(r"$P_t$")
ax1.set_title("Flowed plaquette and topological charge")

ax2 = fig1.add_subplot(312)
ax2.plot(t,topc,label=r"$Q = a^4\sum_x q_L^{clov}(x)$")
ax2.set_ylabel(r"$Q$")
ax2.set_xlabel(r"$t$")
ax2.legend()

ax3 = fig1.add_subplot(313)
ax3.plot(t,topc**2,label=r"$Q^2$")
ax3.set_ylabel(r"$Q^2$")
ax3.set_xlabel(r"$t$")
ax3.legend()

fig1.savefig("../figures/topological_charge_test.png",dpi=300)
plt.show()